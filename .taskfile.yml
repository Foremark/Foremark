- name: test
  task:
    - - taskfile build:dist
    - - mocha

- name: start
  task: webpack-dev-server --config webpack.dev.js

- name: doc
  task: node_modules/.bin/typedoc --out typedoc app

- name: build
  tasks:
    # `build:wasm` generates ES modules, so run it before other tasks
    - - taskfile build:wasm
      # `cargo-license` might take long on first run
      - taskfile build:cargo-license
    - - taskfile build:browser
      - taskfile build:dist

- name: build:wasm
  tasks:
    - - cd rust/diagram
    - - cargo +nightly build --release --target wasm32-unknown-unknown
    - - cd ../..
    - - mkdir -p wasm
    - - cp target/wasm32-unknown-unknown/release/diagram.wasm wasm/diagram.wasm

    - - ls -l wasm/diagram.wasm && echo "wasm-snip panicking-code..."
    - - wasm-snip --snip-rust-panicking-code wasm/diagram.wasm -o wasm/diagram.wasm

    # We shouldn't blanket strip all `std::fmt` items b/c SVG output needs those

    # Strip all `std::fmt::builders::Debug*` and `std::fmt::Debug` impls
    - - ls -l wasm/diagram.wasm && echo "wasm-snip debug formatting..."
    - - wasm-snip wasm/diagram.wasm -o wasm/diagram.wasm -p 'core3fmt8builders11Debug' -p 'core\.\.fmt\.\.Debug'

    # Strip `core::str::slice_error_fail`
    - - ls -l wasm/diagram.wasm && echo "wasm-snip slice_error_fail..."
    - - wasm-snip wasm/diagram.wasm -o wasm/diagram.wasm -p 'slice_error_fail'

    - - ls -l wasm/diagram.wasm && echo "wasm-opt..."
    - - wasm-opt -Oz --dce --strip wasm/diagram.wasm -o wasm/diagram.wasm

    - - ls -l wasm/diagram.wasm && echo "wasm-bindgen..."
    - - wasm-bindgen wasm/diagram.wasm --out-dir wasm

- name: build:cargo-license
  tasks:
    - - mkdir -p wasm
    - - cargo-license -a -d | node tools/fix-cargo-license.js > wasm/cargo-license.txt

- name: build:browser
  tasks:
    - - webpack --config webpack.prod.js
      - webpack --config webpack.bundle.js
    - - cat tools/cargo-license-header.txt >> browser/licenses.txt
    - - cat wasm/cargo-license.txt >> browser/licenses.txt

- name: build:dist
  task: tsc -p tsconfig.build.json
