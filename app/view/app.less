@import "~./constants.less";
@import "~./utils.less";

@import (less) "~../../lib/source/fonts.css";
@import (less) "~../../lib/fira/fonts.css";

html, body {
    background: white;
    font-family: @font-family;
    font-size: 15px;
    color: #444;
    line-height: 1.5;
    margin: 0;
    padding: 0;
}

@media (prefers-color-scheme: dark) {
    html, body {
        background: #222;
        color: #eee;
    }
}

.root {
    padding: 0;
    &.sidebarVisible {
        padding-left: @sidebar-width;
    }
    @media (max-width: @screen-medium-max) { padding-left: 0 !important; }
}

main {
    // Animate the left position when the sidebar visibility is toggled
    position: relative;
    left: 0;
    .sidebarVisible & { left: -@sidebar-width; }

    transition: 200ms transform;
    .sidebarVisible & { transform: translateX(@sidebar-width); }

    // But not in screen sizes where the sidebar is displayed in a modal window.
    @media (max-width: @screen-medium-max) {
        transform: none !important;
        left: 0 !important;
    }
}

.modalBackground {
    position: fixed;
    left: 0; top: 0; right: 0; bottom: 0;
    z-index: 50;

    background: black;
    display: none;
    pointer-events: none;
    opacity: 0;

    transition: 200ms opacity;

    @media (max-width: @screen-medium-max) {
        display: block;
        .sidebarModalVisible & {
            opacity: 0.5;
            pointer-events: auto;
        }
    }
}

.toolbar {
    position: fixed;
    left: 0; top: 0;
    z-index: 200;
    white-space: nowrap;
    margin: 5px 4px;

    > * { vertical-align: bottom }

    > input.search {
        font-family: @ui-font-family;
        width: (@sidebar-width - 6px);
        height: 24px;
        box-sizing: border-box;
        background: transparent;
        border: 1px solid #aaa;
        padding: 4px 4px;
        margin: 0 4px 0 0;
        border-radius: 3px;

        opacity: 0.5;
        &:hover {
            opacity: 1;
        }
        .sidebarVisible & {
            opacity: 1;
            background: white;
            @media (prefers-color-scheme: dark) {
                background: #222;
            }
        }

        // Matching the style to the sidebar visibility in the "medium" screen
        // size is complex, so we just opt to use the "sidebar is visible" style
        // all the times.
        @media (max-width: @screen-medium-max) {
            opacity: 1;
            background: white;
            @media (prefers-color-scheme: dark) {
                background: #222;
            }
        }
    }

    // Toolbar button
    > input[type=checkbox] { display: none; }
    > input[type=checkbox] + label {
        height: 24px;
        display: inline-block;
        box-sizing: border-box;
        border: 1px solid #aaa;
        border-radius: 3px;
        opacity: 0.5;
        position: relative;
        &:hover {
            opacity: 1;
        }

        @media (max-width: @screen-medium-max) {
            opacity: 1;
            background: white;
            @media (prefers-color-scheme: dark) {
                background: #222;
            }
        }
    }
    > input[type=checkbox]:checked + label {
        border-color: @accent-color;
        background: @accent-color;
        color: #eee;
        opacity: 1;
    }

    label.sidebarToggle, label.sidebarToggleModal {
        width: 40px; @text-hidden();
        > span {
            left: 13px; top: 6px; width: 12px;
            &:before, &:after {
                content: "";
                left: 0; right: 0;
            }
            &, &:before, &:after {
                position: absolute;
                background: black;
                height: 1px;
                @media (prefers-color-scheme: dark) { background: #eee; }
            }
            &:before { top: 4px; }
            &:after { top: 8px; }
        }
    }
    > input[type=checkbox]:checked + label.sidebarToggle > span,
    > input[type=checkbox]:checked + label.sidebarToggleModal > span {
        &, &:before, &:after { background: #eee !important; }
    }

    // Display the appropriate button depending on the screen size.
    label.sidebarToggleModal { display: none !important; }
    @media (max-width: @screen-medium-max) {
        label.sidebarToggle { display: none !important; }
        label.sidebarToggleModal { display: inline-block !important; }
    }

    .spinner {
        position: relative;
        display: inline-block;
        width: 16px; height: 16px;
        margin: 0 8px;
        vertical-align: -4px;

        animation: 2000ms both infinite linear;
        animation-name: spin;

        &:before, &:after {
            box-sizing: border-box;
            content: "";
            position: absolute;
            left: 0; top: 0; width: 100%; height: 100%;
            border: 1px solid #555;
            border-top-color: transparent;
            border-right-color: transparent;
            border-bottom-color: transparent;
            border-radius: 100%;
            animation: 600ms both infinite ease-in-out;
            animation-name: spin;
            @media (prefers-color-scheme: dark) {
                border-left-color: #bbb;
            }
        }
        &:after {
            animation-delay: 50ms;
        }
    }
}

.sidebar {
    position: fixed;
    left: 0; top: 0; bottom: 0; width: @sidebar-width;
    z-index: 100;

    @media (max-width: @screen-small-max) { width: 90%; }

    background: #fafafa;
    @media (prefers-color-scheme: dark) {
        background: #444;
    }

    // Animate toggling the sidebar
    transition: 200ms transform;
    .root:not(.sidebarVisible) & { transform: translateX(-100%); }
    @media (max-width: @screen-medium-max) {
        .root.sidebarModalVisible & { transform: none; }
        .root:not(.sidebarModalVisible) & { transform: translateX(-100%); }
    }

    > nav {
        display: none;
        position: absolute;
        left: 0; top: 2em; right: 0; bottom: 0;
        overflow: auto;
        pointer-events: auto;
        -webkit-overflow-scrolling: touch;

        &.show {
            display: block;
        }
    }
}

main {
    margin: 3em 2em;
    @media (max-width: @screen-medium-max) {
        margin: 3em 1em;
    }
    @media (max-width: @screen-small-max) {
        margin: 3em 0.5em;
    }

    mf {
        display: block;
    }

    // Title
    mf-title {
        font-size: 2.2rem;
        margin: 1em 0;
        display: block;
        font-style: italic;
    }
    mf-lead {
        display: block;
        font-style: italic;
    }

    // Headings
    h1 {
        font-size: 1.8rem;
        margin: 2rem 0 1.5rem;
        font-style: italic;
        font-weight: normal;
    }
    h2 {
        font-size: 1.5rem;
        margin: 1rem 0 1rem;
        font-style: italic;
        font-weight: normal;
    }
    a:global(.anchor) {
        position: relative;
        display: block;
        top: calc(-25px - 1em); // Move slightly so it won't overlap with the toolbar
    }

    // Section number
    mf-title, h1, h2, h3, h4, h5, h6, h7, h8, h9 {
        > :global(span.section-number) {
            font-style: normal;
        }
    }

    a[href] {
        color: @accent-color;
        text-decoration: none;
        &:hover {
            text-decoration: underline;
        }
    }

    // Lists
    li, dt, dd {
        // Remove margins from top-level `p` of list items.
        > p { margin: 0; }
        // ... except between adjacent `p`s.
        > p + p { margin-top: 0.5em; }
    }

    li {
        // Checklist
        &:global(.checked),
        &:global(.unchecked) {
            list-style: none;
            &:before {
                font-size: 120%;
                position: absolute;
                transform: translate(-1.2em, -0.15em);
            }
        }
        &:global(.checked):before { content: "\2611"; }
        &:global(.unchecked):before { content: "\2610"; }
    }

    // Code blocks (a set of `mf-code`s)
    mf-codeblock {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
        display: block;
        padding: 0.5em 0.25em;
        margin: 0.25em;

        overflow-x: auto;
        -webkit-overflow-scrolling: touch;

        @media (prefers-color-scheme: dark) {
            border-color: #eee;
        }
    }

    // Block quotations
    blockquote {
        margin: 1em 1em;
        border-left: 3px solid rgba(128, 128, 128, 0.3);
        padding-left: 1em;

        font-size: 90%;
        blockquote { font-size: inherit; }
    }

    // Code (inline/block)
    code, mf-code {
        font-size: 90%;
        font-family: @monospace-font-family;
        letter-spacing: -0.02em;
        tab-size:4; -moz-tab-size:4; -o-tab-size:4;
        white-space: pre;
    }
    code {
        page-break-inside: avoid;
    }

    // Diagram fallback
    mf-diagram {
        &:extend(main mf-code);
        line-height: 1.0;
    }

    mf-diagram-inner {
        display: inline-block;
        > svg {
            width: 100%;
        }
    }

    mf-diagram svg {
        text {
            font-family: @font-family;
        }
    }

    mf-admonition {
        display: block;
        position: relative;
        margin: 1em 0;
        padding: 0em 1em;
        border-left: 4px solid rgba(128, 128, 128,.3);
        background-color: rgba(128, 128, 128,.08);
        overflow: hidden;
        border-radius: 3px;

        > mf-admonition-title {
            display: block;
            font-weight: bold;
            border-color: rgba(68,138,255,.4);
            margin-top: 1em;
        }

        > mf-admonition-title::before {
            font-weight: bold;
            font-size: 150%;
        }

        // Markdeep admonition types (tip, warning, error) +  reStructuredText
        // standard admonitions
        // (http://docutils.sourceforge.net/0.7/docs/ref/rst/directives.html#specific-admonitions)
        &[type=tip], &[type=hint] {
            border-left-color: rgba(50, 255, 90, .4);
            background-color: rgba(50, 255, 90, .15);
        }

        &[type=warning], &[type=attention], &[type=caution], &[type=important] {
            border-left-color: rgba(255, 205, 0, .4);
            background-color: rgba(255, 205, 0, .15);
        }

        &[type=error], &[type=danger] {
            border-left-color: rgba(255, 23, 68, .25);
            background-color: rgba(255, 23, 68, .1);
        }
    }

    div:global(.tableWrapper) {
        overflow-x: auto;
        max-width: 100%;
    }
    table {
        border-collapse: collapse;
        margin: 1em 0;
        min-width: 80%;
    }
    td, th {
        border-top: 1px solid #ccc;
        border-bottom: 1px solid #ccc;
        padding: 0.4em 0.6em;
    }

    // Floating contents and blocks
    mf-figure, mf-note {
        display: block;
        margin: 1em 1em;
        p {
            margin: 0.25em 0;
        }
    }

    // Automatically scale images in blocks if they are the only child of
    // the containing paragraph
    mf-figure, mf-note {
        > div > p {
            > img, > mf-diagram {
                &:first-child:last-child { max-width: 100%; }
            }
        }
    }

    mf-figure {
        text-align: center;
        > div > mf-figure-caption {
            display: block;
            > mf-label {
                font-weight: bold;
            }
        }
    }

    mf-note {
        > div > mf-label {
            display: block;
            float: left;
            vertical-align: super;
            font-size: smaller;
            margin-right: 0.5em;
        }

        font-size: 90%;
        line-height: 1.4;
    }

    // Sidenotes. Read `mfview.ts` to understand how they work.
    mf-sidenote { display: none; }

    :global(.only-sidenote) { display: none; }

    @media (min-width: @screen-large-min) {
        @sidenote: {
            position: relative;
            width: @sidenote-width;
            top: -@sidenote-vertical-adjustment;
            font-size: 80%;
            line-height: 1.4;
            text-align: left;
        };

        mf:global(.has-sidenotes) {
            margin-right: (@sidenote-width + @sidenote-body-separation);

            // "full" styling of figures
            mf-figure[size="full"] {
                margin: 1em 0;
                clear: both;
                width: calc(100% + @sidenote-width + @sidenote-body-separation); // ignore side margin

                // Display the caption like a sidenote
                > div > mf-figure-caption {
                    float: right;
                    @sidenote();

                    padding-top: @sidenote-vertical-adjustment;

                    margin: 0.8em 0 @sidenote-margin;
                }
            }
        }

        :global(.only-sidenote) { display: inline; }
        :global(.hide-sidenote) { display: none; }

        // `<ViewTagNames.Sidenote>` is a surrogate element - it contains a
        // copy of the original figure or note element. The surrogate is usually
        // inserted to a different location than the original element, which is
        // why it's needed.
        // On a large screen, the original element is hidden via
        // `.hide-sidenote` and the surrogate is displayed instead.
        mf-sidenote,
        :global(.no-surrogate) {
            float: right;
            clear: right;

            // Do not allocate a space in the content box - it's displayed
            // outside of the content box.
            width: 0;
            margin: 0;

            display: block;

            // The following selector selects:
            //  - `mf-sidenote > mf-figure`
            //  - `mf-sidenote > mf-note`
            //  - `mf-figure.no-surrogate > div`
            //  - `mf-note.no-surrogate > div`
            > * {
                @sidenote();
                margin: 0 0 @sidenote-margin;
                left: @sidenote-body-separation;
            }
        }
    }

    mf-error {
        display: inline-block;
        border: 2px solid red;
        margin: 0.5em; padding: 0.5em;
        font-size: 80%;
    }
}

:global { @import (less) "~highlight.js/styles/tomorrow.css"; }
@media (prefers-color-scheme: dark) {
    :global { @import (less) "~highlight.js/styles/tomorrow-night.css"; }
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
