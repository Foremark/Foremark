// The CSS mdoule for the application root component.
//
// `.module` in the file name indicates this is a CSS module. The build system
// of Foremark doesn't care and consider everything as a CSS module, but some
// external systems, such as `gatsby-plugin-less` (the LESS plugin for GatsbyJS,
// a static site builder) needs it to enable CSS modules.
@import "~./constants.less";
@import "~./utils.less";

@import (less) "~../../lib/et-book/fonts.css";
@import (less) "~../../lib/source/fonts.css";

html, body {
    background: @background-color;
    background: var(--background-color);
    color: @text-color;
    color: var(--text-color);
    @font-family();
    font-size: 17px;
    line-height: 1.5;
    margin: 0;
    padding: 0;
    -webkit-text-size-adjust: none;
}

body {
    display: block !important;
}

@media screen {
    .root {
        padding: 0 (@sidebar-width / 2);
        @media (max-width: @screen-medium-max) {
            padding: 0 !important;
            margin: 0 auto;

            // Bound the text width by the minimum text width of the "large" state.
            max-width: calc(@screen-medium-max - @sidebar-width - 2em);
        }
    }

    main {
        // Animate the left position when the sidebar visibility is toggled
        position: relative;

        transition: 200ms transform;
        .sidebarVisible & { transform: translateX((@sidebar-width / 2)); }

        // But not in screen sizes where the sidebar is displayed in a modal window.
        @media (max-width: @screen-medium-max) {
            transform: none !important;
            left: 0 !important;
        }
    }
}

@media print {
    html, body {
        font-size: 12px;
        color: inherit;
    }
}

.modalBackground {
    position: fixed;
    left: 0; top: 0; right: 0; bottom: 0;
    z-index: 50;

    background: black;
    display: none;
    pointer-events: none;
    opacity: 0;

    transition: 200ms opacity;

    @media (max-width: @screen-medium-max) {
        display: block;
        .sidebarModalVisible & {
            opacity: 0.5;
            pointer-events: auto;
        }
    }
}

.toolbar {
    position: fixed;
    left: 0; top: 0;
    z-index: 100;
    white-space: nowrap;
    margin: 10px;
    pointer-events: none;

    @media not screen { display: none; }

    > * { vertical-align: middle; }

    @button-highlight-color: #7f7f7f;

    // Animate the left position when the sidebar visibility is toggled
    transition: 200ms transform;
    .sidebarVisible & { transform: translateX(@sidebar-width); }

    // But not in screen sizes where the sidebar is displayed in a modal window.
    @media (max-width: @screen-medium-max) {
        transform: none !important;
    }

    // Toolbar button
    > input[type=checkbox] { display: none; }
    > input[type=checkbox] + label {
        height: 30px;
        display: inline-block;
        box-sizing: border-box;
        border-radius: 1000px;
        opacity: 0.5;
        position: relative;
        pointer-events: auto;
        cursor: pointer;
        &:hover {
            opacity: 1;
        }
    }
    > input[type=checkbox]:checked + label {
        background: @button-highlight-color;
        color: #eee;
        opacity: 1;
    }

    label.sidebarToggle, label.sidebarToggleModal {
        width: 30px; @text-hidden();
        > span {
            left: 9px; top: 11px; width: 12px;
            &:before, &:after {
                content: "";
                left: 0; right: 0;
            }
            &, &:before, &:after {
                position: absolute;
                background: @foreground-color;
                background: var(--foreground-color);
                height: 1px;
            }
            &:before { top: 4px; }
            &:after { top: 8px; }
        }
    }
    > input[type=checkbox]:checked + label.sidebarToggle > span,
    > input[type=checkbox]:checked + label.sidebarToggleModal > span {
        &, &:before, &:after { background: #eee !important; }
    }

    // Display the appropriate button depending on the screen size.
    label.sidebarToggleModal { display: none !important; }
    @media (max-width: @screen-medium-max) {
        label.sidebarToggle { display: none !important; }
        label.sidebarToggleModal { display: inline-block !important; }
    }

    .spinner {
        position: relative;
        display: inline-block;
        width: 16px; height: 16px;
        margin: 0 8px;
        vertical-align: -4px;

        animation: 2000ms both infinite linear;
        animation-name: spin;
        opacity: 0.6;

        &:before, &:after {
            box-sizing: border-box;
            content: "";
            position: absolute;
            left: 0; top: 0; width: 100%; height: 100%;
            border: 1px solid @foreground-color;
            border: 1px solid var(--foreground-color);
            border-top-color: transparent;
            border-right-color: transparent;
            border-bottom-color: transparent;
            border-radius: 100%;
            animation: 600ms both infinite ease-in-out;
            animation-name: spin;
        }
        &:after {
            animation-delay: 50ms;
        }
    }
}

.sidebar {
    position: fixed;
    left: 0; top: 0; bottom: 0; width: @sidebar-width;
    z-index: 200;
    box-sizing: border-box;

    @media not screen { display: none; }

    @media (max-width: @screen-small-max) { width: 80%; }

    background: #fafafa;
    @media screen and (prefers-color-scheme: dark) {
        background: #444;
    }
    border-right: 1px solid rgba(128, 128, 128, 0.4);

    // Animate toggling the sidebar
    transition: 200ms transform;
    .root:not(.sidebarVisible) & { transform: translateX(-100%); }
    @media (max-width: @screen-medium-max) {
        .root.sidebarModalVisible & { transform: none; }
        .root:not(.sidebarModalVisible) & { transform: translateX(-100%); }
    }
}

main {
    margin: 3em 2em;
    @media screen and (max-width: @screen-medium-max) {
        margin: 3em 1em;
    }
    @media screen and (max-width: @screen-small-max) {
        margin: 3em 0.5em;
    }
    @import (less) "~./mfview.less";
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
