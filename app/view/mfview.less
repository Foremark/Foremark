line-height: 1.5;

[xml|lang=ja] & {
    line-height: 1.8;
    @media screen { font-size: 95%; }
}

mf-document {
    display: block;
    overflow-wrap: break-word;
}

// Title
mf-title {
    font-size: 2.2rem;
    margin: 2em 0 1em;
    display: block;
    font-style: normal;
    line-height: 1.3;
}
mf-lead {
    display: block;
    font-style: italic;
    font-size: 1.1rem;
    margin: -1.5em 0 2em;
    [xml|lang=ja] & { font-style: normal; }
}

// Headings
h1 {
    font-size: 2.0rem;
    margin: 2.3rem 0 1.5rem;
    font-style: italic;
    font-weight: normal;
    clear: right; // Clear sidenotes
    line-height: 1.3;
    [xml|lang=ja] & { font-style: normal; }
}
h2 {
    font-size: 1.4rem;
    margin: 1rem 0 1rem;
    font-style: italic;
    font-weight: normal;
    clear: right; // Clear sidenotes
    line-height: 1.3;
    [xml|lang=ja] & { font-style: normal; }
}
h3, h4, h5, h6, h7, h8, h9 { @bold-font-family(); line-height: 1.3; }
a:global(.anchor) {
    position: relative;
    display: block;
    top: calc(-25px - 1em); // Move slightly so it won't overlap with the toolbar
}

// OpenType features
mf-title, h1, h2, h3, h4, h5, h6, h7, h8, h9 {
    font-feature-settings: 'palt';
}

// Section number
mf-title, h1, h2, h3, h4, h5, h6, h7, h8, h9 {
    > :global(span.section-number) {
        font-style: normal;
    }
}

a[href] {
    color: inherit;
    text-decoration: underline;
    &:hover {
        text-decoration: underline;
    }
}

b { @bold-font-family(); }

hr {
    border: none;
    border-top: 1px solid rgba(128, 128, 128, 0.3);
    margin: 4em 4em;
}

// Lists
li, dt, dd {
    // Remove margins from top-level `p` of list items.
    > p { margin: 0; }
    // ... except between adjacent `p`s.
    > p + p { margin-top: 0.5em; }
}

li {
    // Checklist
    &:global(.checked),
    &:global(.unchecked) {
        list-style: none;
        &:before {
            font-size: 120%;
            position: absolute;
            transform: translate(-1.2em, -0.15em);
        }
    }
    &:global(.checked):before { content: "\2611"; }
    &:global(.unchecked):before { content: "\2610"; }
}

// Code blocks (a set of `mf-code`s)
mf-codeblock {
    background: @background-color;
    background: var(--background-color);

    display: block;
    padding: 0.5em 0.5em;
    margin: 0.5em 0.5em 0.5em 1.3em;

    text-align: left;

    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
}
pre { margin: 0; }

// Block quotations
blockquote {
    margin: 1em 1em;
    border-left: 3px solid rgba(128, 128, 128, 0.3);
    padding-left: 1em;

    font-size: 90%;
    blockquote { font-size: inherit; }
}

// Code (inline/block)
@code-line-height: 1.5em;
@pre-style: {
    white-space: pre-wrap;
    overflow-wrap: break-word;
    font-size: 95%;
    @monospace-font-family();
    tab-size:4; -moz-tab-size:4; -o-tab-size:4;
};
code, mf-code {
    @pre-style();
}
h1, h2, h3 { code, mf-code { letter-spacing: -0.01em; } }
mf-code {
    line-height: @code-line-height;
    display: block;
    overflow-wrap: break-word;
}
code {
    border-radius: 2px;
    padding: 0 2px;

    page-break-inside: avoid;
    white-space: pre-wrap;
}

// Indent lines after a soft word wrap. What we are trying to accomplish is
// similar to the behavior of `hanging` in `text-indent`, whose browser
// support is completely non-existent.
@line-break-indent: 2em;
mf-code {
    padding-left: @line-break-indent;
    mf-code-line { margin-right: -@line-break-indent; }
    mf-code-line:before { content: ""; }

    position: relative;
}

// Display line break symbols
@supports (box-decoration-break: clone) or (-webkit-box-decoration-break: clone) {
    mf-code {
        // Draw a line break symbol on every line
        > span {
            // Chop up the border box of this `span` into physical lines
            box-decoration-break: clone;
            -webkit-box-decoration-break: clone;

            margin-left: -@line-break-indent;
            padding-left: @line-break-indent;
            background: url(./assets/line-break.svg) (@code-line-height * 0.1) 50% no-repeat;
            background-size: @code-line-height @code-line-height;
        }

        // And then hide it on the first line
        mf-code-line:before {
            border-left: @line-break-indent solid;
            margin-left: -@line-break-indent;
            border-color: @background-color;
            border-color: var(--background-color);
        }
    }
}

// Diagram fallback
mf-diagram:not(:global(.loaded)) {
    @pre-style();
    display: inline-block;
    text-align: left;
    line-height: 1.3;
}

mf-diagram-inner {
    display: inline-block;
    width: 100%;
    > svg {
        width: 100%;
    }
}

mf-diagram svg :global {
    rect.backdrop, .bg_fill { fill: var(--background-color); }
    .fg_fill { fill: var(--foreground-color); }
    .fg_stroke { stroke: var(--foreground-color); }
    text {
        fill: var(--foreground-color);
        font-size: 14px;
        @monospace-font-family();
        white-space: nowrap;
    }
}

mf-admonition {
    display: block;
    position: relative;
    margin: 1em 0;
    padding: 0em 1em;
    border-left: 4px solid rgba(128, 128, 128,.3);
    background-color: rgba(128, 128, 128,.08);
    overflow: hidden;
    border-radius: 3px;

    > mf-admonition-title {
        display: block;
        font-weight: bold;
        border-color: rgba(68,138,255,.4);
        margin-top: 1em;
    }

    > mf-admonition-title::before {
        font-weight: bold;
        font-size: 150%;
    }

    // Markdeep admonition types (tip, warning, error) +  reStructuredText
    // standard admonitions
    // (http://docutils.sourceforge.net/0.7/docs/ref/rst/directives.html#specific-admonitions)
    &[type=tip], &[type=hint] {
        border-left-color: rgba(50, 255, 90, .4);
        background-color: rgba(50, 255, 90, .15);
    }

    &[type=warning], &[type=attention], &[type=caution], &[type=important] {
        border-left-color: rgba(255, 205, 0, .4);
        background-color: rgba(255, 205, 0, .15);
    }

    &[type=error], &[type=danger] {
        border-left-color: rgba(255, 23, 68, .25);
        background-color: rgba(255, 23, 68, .1);
    }
}

div:global(.tableWrapper) {
    overflow-x: auto;
    max-width: 100%;
    -webkit-overflow-scrolling: touch;
}
table {
    border-collapse: collapse;
    margin: 1em 0;
    min-width: 80%;
}
td, th {
    border-top: 1px solid #ccc;
    border-bottom: 1px solid #ccc;
    @media print { border-width: 0.5px; }
    padding: 0.4em 0.6em;
}
th { @bold-font-family(); }

img, video, audio, iframe {
    max-width: 100%;
}
mf-media {
    text-align: left;
}

// Floating contents and blocks
mf-figure, mf-note {
    display: block;
    margin: 1em 1em;
    p {
        margin: 0.25em 0;
    }
}
mf-cite {
    display: block;
    p {
        margin: 0.25em 0;
    }

    @label-width: 7em;
    &:not(:global(.surrogate)) {
        padding-left: @label-width;
        > p > mf-label {
            display: block;
            overflow-wrap: break-word;
            float: left; width: (@label-width - 0.3em);
            margin-left: -@label-width;
        }

        // Prevent sidenotes from affecting the vertical position of
        // the `mf-label` inside this `mf-cite`.
        overflow: hidden;

        // Expand `mf-cite` to contain the entirety of the `mf-label` within
        &:after { content: ""; display: block; clear: left; }
    }
}

mf-figure {
    text-align: center;
    > div > mf-figure-caption, > div > p > mf-figure-caption {
        display: block;
        mf-label {
            &:after { content: ': '; }
        }
    }
}

mf-note {
    > div > mf-label, > div > p > mf-label {
        display: block;
        float: left;
        vertical-align: super;
        font-size: smaller;
        margin-right: 0.5em;
    }

    font-size: 90%;
    line-height: 1.4;
}

// Sidenotes. Read `mfview.ts` to understand how they work.
mf-sidenote { display: none; }

:global(.only-sidenote) { display: none; }

@media (min-width: @screen-medium-min), print {
    @sidenote: {
        position: relative;
        width: @sidenote-width;
        top: (-@sidenote-vertical-adjustment);
        font-size: 0.9rem;
        line-height: 1.2;
        text-align: left;
    };

    mf-document:global(.has-sidenotes) {
        margin-right: calc(@sidenote-width + @sidenote-body-separation);

        // "full" styling of figures
        mf-figure[size="full"] {
            margin: 1em 0;
            clear: both;
            width: calc(100% + @sidenote-width + @sidenote-body-separation); // ignore side margin

            // Display the caption like a sidenote
            > div > mf-figure-caption {
                float: right;
                @sidenote();

                padding-top: @sidenote-vertical-adjustment;

                margin: 0.8em 0 @sidenote-margin;
            }
        }
    }

    :global(.only-sidenote) { display: inline; }
    :global(.hide-sidenote) { display: none; }

    // `<ViewTagNames.Sidenote>` is a surrogate element - it contains a
    // copy of the original figure or note element. The surrogate is usually
    // inserted to a different location than the original element, which is
    // why it's needed.
    // On a large screen, the original element is hidden via
    // `.hide-sidenote` and the surrogate is displayed instead.
    mf-sidenote,
    :global(.no-surrogate) {
        float: right;
        clear: right;

        // Do not allocate a space in the content box - it's displayed
        // outside of the content box.
        width: 0;
        margin: 0;

        display: block;

        // The following selector selects:
        //  - `mf-sidenote > mf-figure`
        //  - `mf-sidenote > mf-note`
        //  - `mf-sidenote > mf-cite`
        //  - `mf-figure.no-surrogate > div`
        //  - `mf-note.no-surrogate > div`
        > * {
            @sidenote();
            margin: 0 0 @sidenote-margin;
            left: @sidenote-body-separation;
        }
    }
}

mf-error {
    display: inline-block;
    border: 2px solid red;
    box-sizing: border-box;
    max-width: 100%;
    margin: 0.5em; padding: 0.5em;
    font-size: 80%;
    text-align: left;
}

:global { @import (less) "~highlight.js/styles/tomorrow.css"; }
@media screen and (prefers-color-scheme: dark) {
    :global { @import (less) "~highlight.js/styles/tomorrow-night.css"; }
}
